# Generated by Django 5.2 on 2025-05-24 13:01

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nombre de la categoría.', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Descripción de la categoría.')),
                ('is_active', models.BooleanField(default=True, help_text='Indica si la categoría está activa.')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Título de la notificación.', max_length=255)),
                ('message', models.TextField(help_text='Mensaje o contenido de la notificación.')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Fecha y hora en que se creó la notificación.')),
                ('is_read', models.BooleanField(default=False, help_text='Indica si la notificación ha sido marcada como leída.')),
            ],
        ),
        migrations.CreateModel(
            name='TimeSlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.DateTimeField(help_text='Fecha y hora de inicio del intervalo.')),
                ('end', models.DateTimeField(help_text='Fecha y hora de fin del intervalo.')),
                ('is_full', models.BooleanField(default=False, help_text='Indica si el intervalo de tiempo está completo.')),
            ],
            options={
                'verbose_name': 'TimeSlot',
                'verbose_name_plural': 'TimeSlots',
                'ordering': ['start'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(blank=True, help_text='Número de teléfono del usuario (opcional).', max_length=20, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('approved', models.BooleanField(default=False, help_text='Marca si la reserva fue aprobada.')),
                ('approval_date', models.DateField(blank=True, help_text='Fecha en que se aprobó la reserva.', null=True)),
                ('code', models.CharField(help_text='Código único de la reserva.', max_length=100, unique=True)),
                ('observations', models.TextField(blank=True, help_text='Comentarios u observaciones sobre la reserva.')),
                ('date', models.DateField(help_text='Fecha programada de la reserva.')),
                ('user', models.ForeignKey(help_text='Usuario que realizó la reserva.', on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Booking',
                'verbose_name_plural': 'Bookings',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('buy_date', models.DateField(help_text='Fecha en que se realizó la compra.')),
                ('code', models.CharField(help_text='Código único identificador del pedido.', max_length=100, unique=True)),
                ('amount', models.FloatField(help_text='Importe total del pedido.')),
                ('state', models.CharField(choices=[('PREPARACION', 'Preparación'), ('ENVIADO', 'Enviado'), ('RECIBIDO', 'Recibido'), ('CANCELADO', 'Cancelado')], default='PREPARACION', help_text='Estado actual del pedido.', max_length=12)),
                ('user', models.ForeignKey(help_text='Usuario que generó el pedido.', on_delete=django.db.models.deletion.CASCADE, related_name='orders', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Order',
                'verbose_name_plural': 'Orders',
                'ordering': ['-buy_date'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nombre del producto.', max_length=255)),
                ('description', models.TextField(help_text='Descripción detallada del producto.')),
                ('price', models.DecimalField(decimal_places=2, help_text='Precio del producto.', max_digits=10)),
                ('quantity', models.IntegerField(help_text='Cantidad disponible en stock.')),
                ('image', models.ImageField(blank=True, null=True, upload_to='products/')),
                ('category', models.ForeignKey(blank=True, help_text='Categoría a la que pertenece el producto.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='products', to='menu_app.category')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='OrderProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.ForeignKey(help_text='Pedido asociado.', on_delete=django.db.models.deletion.CASCADE, to='menu_app.order')),
                ('product', models.ForeignKey(help_text='Producto asociado.', on_delete=django.db.models.deletion.CASCADE, to='menu_app.product')),
            ],
            options={
                'verbose_name': 'Order Product',
                'verbose_name_plural': 'Order Products',
                'unique_together': {('order', 'product')},
            },
        ),
        migrations.AddField(
            model_name='order',
            name='products',
            field=models.ManyToManyField(help_text='Productos incluidos en el pedido.', related_name='orders', through='menu_app.OrderProduct', to='menu_app.product'),
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Título de la calificación.', max_length=255)),
                ('text', models.TextField(help_text='Texto o comentarios de la calificación.')),
                ('rating', models.PositiveIntegerField(help_text='Valor de la calificación (por ejemplo, de 1 a 5).')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Fecha y hora de creación de la calificación.')),
                ('product', models.ForeignKey(help_text='Producto al que pertenece la calificación.', on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='menu_app.product')),
                ('user', models.ForeignKey(help_text='Usuario que realizó la calificación.', on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Rating',
                'verbose_name_plural': 'Ratings',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Table',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('capacity', models.IntegerField(help_text='Capacidad de la mesa (número de personas).')),
                ('description', models.CharField(help_text='Descripción o ubicación de la mesa.', max_length=255)),
                ('is_reserved', models.BooleanField(default=True, help_text='Indica si la mesa está reservada.')),
                ('booking', models.ForeignKey(help_text='Reserva a la que pertenece la mesa.', on_delete=django.db.models.deletion.CASCADE, related_name='tables', to='menu_app.booking')),
            ],
            options={
                'verbose_name': 'Table',
                'verbose_name_plural': 'Tables',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='TableTimeSlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('table', models.ForeignKey(help_text='Mesa asociada al intervalo de tiempo.', on_delete=django.db.models.deletion.CASCADE, to='menu_app.table')),
                ('timeslot', models.ForeignKey(help_text='Intervalo de tiempo asociado a la mesa.', on_delete=django.db.models.deletion.CASCADE, to='menu_app.timeslot')),
            ],
            options={
                'verbose_name': 'Table TimeSlot',
                'verbose_name_plural': 'Table TimeSlots',
                'unique_together': {('table', 'timeslot')},
            },
        ),
        migrations.AddField(
            model_name='table',
            name='timeslots',
            field=models.ManyToManyField(help_text='Intervalos de tiempo asociados a la mesa.', related_name='tables', through='menu_app.TableTimeSlot', to='menu_app.timeslot'),
        ),
        migrations.CreateModel(
            name='UserNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification', models.ForeignKey(help_text='Notificación asociada al usuario.', on_delete=django.db.models.deletion.CASCADE, to='menu_app.notification')),
                ('user', models.ForeignKey(help_text='Usuario que recibe la notificación.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Notification',
                'verbose_name_plural': 'User Notifications',
                'unique_together': {('user', 'notification')},
            },
        ),
        migrations.AddField(
            model_name='user',
            name='notifications',
            field=models.ManyToManyField(blank=True, help_text='Notificaciones asociadas al usuario.', related_name='users', through='menu_app.UserNotification', to='menu_app.notification'),
        ),
    ]
